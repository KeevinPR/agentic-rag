{
  "metadata": {
    "file_path": "/Users/id05309/Documents/tfm/mistral/mistral-markdown/2018/Modelling and solving a cost-oriented resource-constrained multi-model assembly line balancing problem.md",
    "filename": "Modelling and solving a cost-oriented resource-constrained multi-model assembly line balancing problem.md",
    "title": "Modelling and solving a cost-oriented resource-constrained multi-model assembly line balancing problem",
    "year": "2018"
  },
  "tables": [
    {
      "table_number": "1",
      "table_title": "Results from the different algorithms when instances are grouped according to graph characteristics. Results for the multi-start with 50,000 and 500,000 evaluations and EDA with 50,000 solutions are reported. For each grouping of instances according to precedence relations, order strength and distribution of operation times and each of the algorithms, the number of best found solutions among the 180 instances of each group, columns \\# best, and the average gap to the best known solution, columns gap, are provided. For EDA, the gap for the best and the average solution among all 10 independent executions, columns av.sol.gap and best sol.gap, as well as the optimality gap with respect to the lower bound, column Opt.gap, are also reported.",
      "headers": [
        "Structure",
        "Graph <br> OS",
        "Distribution",
        "M-S(50, 000)",
        "",
        "M-S(500, 000)",
        "",
        "EDA",
        "",
        "",
        ""
      ],
      "rows": [
        [
          "",
          "",
          "",
          "\\# best",
          "gap",
          "\\# best",
          "gap",
          "\\# best",
          "av.sol.gap",
          "best sol.gap",
          "Opt.gap"
        ],
        [
          "block",
          "low",
          "bottom",
          57,
          3.27,
          81,
          2.36,
          176,
          0.99,
          0.07,
          8.91
        ],
        [
          "",
          "",
          "middle",
          54,
          0.92,
          100,
          0.47,
          156,
          0.4,
          0.11,
          3.25
        ],
        [
          "",
          "",
          "bimodal",
          45,
          2.98,
          68,
          1.97,
          180,
          0.59,
          0.0,
          7.42
        ],
        [
          "",
          "high",
          "bottom",
          71,
          2.28,
          86,
          1.46,
          178,
          0.62,
          0.02,
          5.6
        ],
        [
          "",
          "",
          "middle",
          68,
          0.64,
          124,
          0.25,
          163,
          0.31,
          0.08,
          2.4
        ],
        [
          "",
          "",
          "bimodal",
          56,
          2.03,
          90,
          1.07,
          171,
          0.65,
          0.08,
          6.05
        ],
        [
          "chain",
          "low",
          "bottom",
          60,
          3.2,
          77,
          1.97,
          179,
          0.71,
          0.02,
          9.1
        ],
        [
          "",
          "",
          "middle",
          64,
          0.81,
          118,
          0.36,
          166,
          0.3,
          0.06,
          3.02
        ],
        [
          "",
          "",
          "bimodal",
          37,
          3.06,
          57,
          1.98,
          177,
          0.63,
          0.03,
          8.48
        ],
        [
          "",
          "high",
          "bottom",
          74,
          1.68,
          120,
          0.85,
          169,
          0.66,
          0.11,
          7.91
        ],
        [
          "",
          "",
          "middle",
          90,
          0.49,
          137,
          0.17,
          166,
          0.26,
          0.06,
          2.08
        ],
        [
          "",
          "",
          "bimodal",
          43,
          2.07,
          78,
          1.16,
          168,
          0.63,
          0.1,
          8.07
        ],
        [
          "mixed",
          "low",
          "bottom",
          60,
          3.35,
          80,
          2.11,
          177,
          0.81,
          0.04,
          8.59
        ],
        [
          "",
          "",
          "middle",
          85,
          0.65,
          128,
          0.3,
          159,
          0.27,
          0.07,
          1.85
        ],
        [
          "",
          "",
          "bimodal",
          40,
          3.25,
          63,
          2.02,
          178,
          0.69,
          0.02,
          7.35
        ],
        [
          "",
          "high",
          "bottom",
          62,
          2.35,
          85,
          1.41,
          177,
          0.71,
          0.05,
          6.46
        ],
        [
          "",
          "",
          "middle",
          90,
          0.59,
          130,
          0.25,
          161,
          0.32,
          0.09,
          1.98
        ],
        [
          "",
          "",
          "bimodal",
          49,
          2.22,
          81,
          1.26,
          169,
          0.62,
          0.08,
          7.88
        ]
      ],
      "row_count": 19,
      "column_count": 11
    },
    {
      "table_number": "2",
      "table_title": "Results from the different algorithms when instances are grouped according to the specific C-R-MMALBP characteristics. Results for the multi-start with 50,000 and 500, 000 evaluations and EDA with 50, 000 solutions are reported. For each grouping of instances according to number of products, number of resources, level of resource use and resource cost, the number of best found solutions among the 90 instances of each group, columns \\# best, and the average gap to the best known solution, columns gap, are provided. For EDA, the gap for the best and the average solution among all 10 independent executions, columns av.sol.gap and best sol.gap, as well as the optimality gap with respect to the lower bound, column Opt.gap, are also reported.",
      "headers": [
        "\\# products",
        "resources",
        "resource <br> Use",
        "resource <br> Cost",
        "M-S(50, 000) <br> \\# best",
        "gap",
        "M-S(500,000) <br> \\# best",
        "gap",
        "\\# best",
        "av.sol.gap",
        "best sol.gap",
        "Opt.gap"
      ],
      "rows": [
        [
          "low",
          "low",
          "low",
          "low",
          64,
          0.34,
          83,
          0.01,
          82,
          0.34,
          0.14,
          3.12
        ],
        [
          "",
          "",
          "",
          "medium",
          76,
          0.26,
          87,
          0.09,
          86,
          0.25,
          0.06,
          2.65
        ],
        [
          "",
          "",
          "",
          "high",
          74,
          0.27,
          85,
          0.07,
          84,
          0.21,
          0.1,
          3.26
        ],
        [
          "",
          "",
          "medium",
          "low",
          51,
          0.51,
          84,
          0.08,
          74,
          0.48,
          0.24,
          3.74
        ],
        [
          "",
          "",
          "",
          "medium",
          63,
          0.73,
          83,
          0.18,
          84,
          0.47,
          0.1,
          4.11
        ],
        [
          "",
          "",
          "",
          "high",
          56,
          0.8,
          81,
          0.16,
          82,
          0.42,
          0.16,
          4.92
        ],
        [
          "",
          "",
          "high",
          "low",
          44,
          0.55,
          82,
          0.08,
          73,
          0.41,
          0.14,
          4.09
        ],
        [
          "",
          "",
          "",
          "medium",
          54,
          0.92,
          72,
          0.51,
          83,
          0.45,
          0.1,
          4.34
        ],
        [
          "",
          "",
          "",
          "high",
          38,
          1.34,
          67,
          0.61,
          83,
          0.54,
          0.08,
          5.12
        ],
        [
          "",
          "high",
          "low",
          "low",
          5,
          1.83,
          24,
          1.01,
          85,
          0.61,
          0.03,
          5.23
        ],
        [
          "",
          "",
          "",
          "medium",
          8,
          3.41,
          31,
          1.78,
          88,
          0.94,
          0.05,
          6.72
        ],
        [
          "",
          "",
          "",
          "high",
          7,
          3.91,
          21,
          2.41,
          88,
          0.98,
          0.03,
          7.77
        ],
        [
          "",
          "",
          "medium",
          "low",
          2,
          2.29,
          8,
          1.4,
          88,
          0.63,
          0.03,
          6.59
        ],
        [
          "",
          "",
          "",
          "medium",
          2,
          3.66,
          5,
          2.45,
          90,
          0.75,
          0.0,
          8.79
        ],
        [
          "",
          "",
          "",
          "high",
          2,
          4.02,
          8,
          2.47,
          87,
          0.93,
          0.03,
          10.29
        ],
        [
          "",
          "",
          "high",
          "low",
          4,
          1.93,
          16,
          1.06,
          90,
          0.46,
          0.0,
          5.95
        ],
        [
          "",
          "",
          "",
          "medium",
          0,
          2.75,
          10,
          1.79,
          87,
          0.65,
          0.03,
          7.82
        ],
        [
          "",
          "",
          "",
          "high",
          2,
          3.03,
          3,
          2.04,
          89,
          0.66,
          0.01,
          8.49
        ],
        [
          "high",
          "low",
          "low",
          "low",
          65,
          0.49,
          76,
          0.2,
          86,
          0.34,
          0.1,
          4.19
        ],
        [
          "",
          "",
          "",
          "medium",
          66,
          0.99,
          81,
          0.44,
          87,
          0.58,
          0.1,
          3.58
        ],
        [
          "",
          "",
          "",
          "high",
          62,
          0.88,
          80,
          0.41,
          88,
          0.32,
          0.04,
          4.0
        ],
        [
          "",
          "",
          "medium",
          "low",
          46,
          0.68,
          67,
          0.33,
          84,
          0.38,
          0.05,
          4.53
        ],
        [
          "",
          "",
          "",
          "medium",
          49,
          1.4,
          64,
          0.87,
          87,
          0.53,
          0.08,
          4.86
        ],
        [
          "",
          "",
          "",
          "high",
          34,
          2.11,
          61,
          1.08,
          83,
          0.58,
          0.1,
          5.43
        ],
        [
          "",
          "",
          "high",
          "low",
          36,
          0.78,
          60,
          0.34,
          82,
          0.43,
          0.06,
          4.6
        ],
        [
          "",
          "",
          "",
          "medium",
          39,
          1.72,
          68,
          0.72,
          87,
          0.45,
          0.03,
          5.47
        ],
        [
          "",
          "",
          "",
          "high",
          21,
          2.48,
          47,
          1.33,
          84,
          0.52,
          0.07,
          5.97
        ],
        [
          "",
          "high",
          "low",
          "low",
          21,
          1.72,
          36,
          1.12,
          88,
          0.52,
          0.02,
          5.65
        ],
        [
          "",
          "",
          "",
          "medium",
          23,
          3.64,
          37,
          2.43,
          84,
          0.81,
          0.06,
          7.54
        ],
        [
          "",
          "",
          "",
          "high",
          19,
          4.84,
          30,
          3.31,
          89,
          0.78,
          0.01,
          7.84
        ],
        [
          "",
          "",
          "medium",
          "low",
          12,
          1.97,
          30,
          1.16,
          88,
          0.55,
          0.01,
          6.52
        ],
        [
          "",
          "",
          "",
          "medium",
          12,
          3.6,
          20,
          2.51,
          88,
          0.8,
          0.01,
          8.41
        ],
        [
          "",
          "",
          "",
          "high",
          12,
          5.02,
          20,
          3.44,
          87,
          0.84,
          0.01,
          9.11
        ],
        [
          "",
          "",
          "high",
          "low",
          14,
          1.5,
          29,
          0.87,
          83,
          0.49,
          0.03,
          5.84
        ],
        [
          "",
          "",
          "",
          "medium",
          12,
          2.35,
          27,
          1.49,
          86,
          0.5,
          0.02,
          7.4
        ],
        [
          "",
          "",
          "",
          "high",
          10,
          2.96,
          20,
          1.98,
          86,
          0.72,
          0.03,
          7.99
        ]
      ],
      "row_count": 36,
      "column_count": 12
    },
    {
      "table_number": "1",
      "table_title": "Table 1 shows that M-S(500,000) only outperforms the average EDA results in terms of average solution gap for three task groupings with middle distribution of operation times. This distribution generates instances in which few tasks may share workstations. Consequently, the additional randomness and the larger number of alternatives considered by the MS(500,000) over EDA, which runs fewer executions, improves the chances that different tasks are packed together, thus improving the chances of finding a very good solution. Note that this result does not apply when the number of Hoffmann executions allotted to the EDA method is increased. Also note that the best solution of EDA after 10 independent runs can be considered as an EDA method with a limit of 500,000 Hoffmann executions that uses 10 restarts as a diversification policy, and thus it is comparable to M-S(500,000) in terms of allotted computing resources, see running time comparisons below. In such a case, EDA outperforms M-S for each grouping of instances.",
      "headers": [
        "Characteristic",
        "type",
        "Av. t(s)",
        "Max. t(s)"
      ],
      "rows": [
        [
          "Structure",
          "block",
          378,
          1648
        ],
        [
          "",
          "chain",
          257,
          1560
        ],
        [
          "",
          "mixed",
          350,
          1745
        ],
        [
          "OS",
          "low",
          469,
          1745
        ],
        [
          "",
          "high",
          187,
          1099
        ],
        [
          "Distribution",
          "bottom",
          618,
          1745
        ],
        [
          "",
          "middle",
          39,
          104
        ],
        [
          "",
          "bimodal",
          328,
          1540
        ],
        [
          "\\# products",
          "low",
          268,
          999
        ],
        [
          "",
          "high",
          388,
          1745
        ],
        [
          "\\# resources",
          "low",
          241,
          1059
        ],
        [
          "",
          "high",
          415,
          1745
        ],
        [
          "resource usage",
          "low",
          308,
          1533
        ],
        [
          "",
          "medium",
          336,
          1591
        ],
        [
          "",
          "high",
          341,
          1745
        ],
        [
          "resource cost",
          "low",
          324,
          1745
        ],
        [
          "",
          "medium",
          331,
          1736
        ],
        [
          "",
          "high",
          330,
          1648
        ]
      ],
      "row_count": 18,
      "column_count": 4
    },
    {
      "table_number": null,
      "table_title": "Table B1. Data from the industrial example. For each operation (columns id.), the operation times for each product (columns $t_{i, \\text { male }}$ and $t_{i, \\text { female }}$ ), resource requirements (column Resource) and current solution (column Corrent sol.) are provided. Moreover, one of the optimal solutions provided by EDA (column EDA sol.) and one of the optimal solutions for the SALBP instance considering only the male (column SALBP ${ }_{\\text {male }}$ ) pr the female ( $\\operatorname{column} \\operatorname{SALBP}_{\\text {female }}$ ) model are also detailed. Whenever a task is not required for a specific garment, be it male or female, no station assignment is reported, as indicated by the '-' sign.",
      "headers": [
        "id.",
        "$t_{i, \\text { male }}$",
        "SALBP ${ }_{\\text {male }}$",
        "$t_{i, \\text { female }}$",
        "SALBP ${ }_{\\text {female }}$",
        "Resource",
        "EDA sol.",
        "Current sol."
      ],
      "rows": [
        [
          1,
          405,
          1,
          360,
          1,
          0,
          1,
          1
        ],
        [
          2,
          90,
          1,
          80,
          1,
          1,
          1,
          1
        ],
        [
          3,
          270,
          1,
          240,
          1,
          1,
          1,
          1
        ],
        [
          4,
          45,
          1,
          40,
          1,
          1,
          1,
          1
        ],
        [
          5,
          0,
          "-",
          960,
          2,
          0,
          2,
          2
        ],
        [
          6,
          0,
          "-",
          240,
          3,
          0,
          3,
          3
        ],
        [
          7,
          225,
          2,
          0,
          "-",
          0,
          2,
          2
        ],
        [
          8,
          90,
          3,
          0,
          "-",
          0,
          2,
          3
        ],
        [
          9,
          90,
          3,
          0,
          "-",
          0,
          2,
          3
        ],
        [
          10,
          135,
          3,
          80,
          3,
          1,
          3,
          3
        ],
        [
          11,
          0,
          "-",
          340,
          3,
          1,
          3,
          3
        ],
        [
          12,
          23,
          3,
          0,
          "-",
          0,
          1,
          2
        ],
        [
          13,
          180,
          2,
          0,
          "-",
          0,
          2,
          2
        ],
        [
          14,
          158,
          2,
          0,
          "-",
          0,
          2,
          2
        ],
        [
          15,
          135,
          2,
          0,
          "-",
          0,
          2,
          2
        ],
        [
          16,
          203,
          3,
          0,
          "-",
          1,
          3,
          3
        ],
        [
          17,
          23,
          3,
          20,
          3,
          0,
          3,
          3
        ],
        [
          18,
          338,
          3,
          280,
          3,
          1,
          3,
          3
        ],
        [
          19,
          158,
          5,
          340,
          8,
          1,
          4,
          4
        ],
        [
          20,
          338,
          5,
          0,
          "-",
          1,
          4,
          4
        ],
        [
          21,
          158,
          5,
          160,
          4,
          1,
          4,
          4
        ],
        [
          22,
          1000,
          4,
          0,
          "-",
          0,
          5,
          5
        ],
        [
          23,
          135,
          5,
          0,
          "-",
          0,
          6,
          6
        ],
        [
          24,
          990,
          6,
          0,
          "-",
          0,
          7,
          7
        ],
        [
          25,
          135,
          7,
          0,
          "-",
          0,
          8,
          8
        ],
        [
          26,
          0,
          "-",
          360,
          4,
          0,
          4,
          4
        ],
        [
          27,
          0,
          "-",
          280,
          4,
          0,
          5,
          5
        ],
        [
          28,
          0,
          "-",
          600,
          5,
          0,
          7,
          5
        ],
        [
          29,
          0,
          "-",
          380,
          5,
          1,
          7,
          6
        ],
        [
          30,
          0,
          "-",
          1000,
          6,
          1,
          8,
          7
        ],
        [
          31,
          495,
          8,
          0,
          "-",
          0,
          8,
          8
        ],
        [
          32,
          180,
          9,
          200,
          9,
          1,
          10,
          9
        ],
        [
          33,
          0,
          "-",
          300,
          7,
          0,
          9,
          8
        ],
        [
          34,
          90,
          7,
          0,
          "-",
          0,
          10,
          9
        ],
        [
          35,
          113,
          7,
          0,
          "-",
          0,
          9,
          10
        ],
        [
          36,
          135,
          7,
          0,
          "-",
          0,
          9,
          9
        ],
        [
          37,
          495,
          8,
          620,
          8,
          1,
          9,
          9
        ],
        [
          38,
          90,
          7,
          80,
          9,
          0,
          9,
          8
        ],
        [
          39,
          23,
          7,
          20,
          9,
          0,
          10,
          8
        ],
        [
          40,
          68,
          7,
          60,
          9,
          0,
          10,
          8
        ],
        [
          41,
          0,
          "-",
          80,
          7,
          0,
          10,
          10
        ],
        [
          42,
          0,
          "-",
          20,
          7,
          0,
          10,
          10
        ],
        [
          43,
          0,
          "-",
          60,
          7,
          0,
          10,
          8
        ],
        [
          44,
          90,
          9,
          80,
          9,
          1,
          10,
          10
        ],
        [
          45,
          540,
          9,
          480,
          9,
          1,
          10,
          10
        ],
        [
          46,
          90,
          10,
          80,
          10,
          1,
          11,
          11
        ],
        [
          47,
          540,
          10,
          480,
          10,
          1,
          11,
          11
        ],
        [
          48,
          135,
          10,
          120,
          10,
          1,
          11,
          11
        ]
      ],
      "row_count": 48,
      "column_count": 8
    }
  ]
}