{
  "metadata": {
    "file_path": "/Users/id05309/Documents/tfm/mistral/mistral-markdown/2018/Expanding variational autoencoders for learning and exploiting latent representations in search distributions.md",
    "filename": "Expanding variational autoencoders for learning and exploiting latent representations in search distributions.md",
    "title": "Expanding variational autoencoders for learning and exploiting latent representations in search distributions",
    "year": "2018"
  },
  "tables": [
    {
      "table_number": null,
      "table_title": null,
      "headers": [
        "Structure",
        "VAE",
        "E-VAE",
        "CE-VAE"
      ],
      "rows": [
        [
          "VAE",
          0,
          247,
          206
        ],
        [
          "E-VAE",
          253,
          0,
          196
        ],
        [
          "CE-VAE",
          294,
          304,
          0
        ]
      ],
      "row_count": 3,
      "column_count": 4
    },
    {
      "table_number": null,
      "table_title": null,
      "headers": [
        "Str.",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F7",
        "F8",
        "F9"
      ],
      "rows": [
        [
          "VAE",
          403,
          502,
          461,
          462,
          480,
          449,
          488,
          453
        ],
        [
          "E-VAE",
          413,
          437,
          465,
          414,
          427,
          411,
          508,
          449
        ],
        [
          "CE-VAE",
          678,
          560,
          568,
          621,
          589,
          635,
          499,
          598
        ]
      ],
      "row_count": 3,
      "column_count": 9
    },
    {
      "table_number": "2",
      "table_title": "Scores for all functions. These scores were computed by adding all the scores in each row of the score matrix for each function. See an example of these matrices in Table 1. These numbers were rounded to integers. A larger value denotes a better performance.",
      "headers": [
        "Structure",
        "VAE",
        "E-VAE",
        "CE-VAE"
      ],
      "rows": [
        [
          "VAE",
          0,
          45.2308,
          -89.7701
        ],
        [
          "E-VAE",
          -45.2308,
          0,
          -135.001
        ],
        [
          "CE-VAE",
          89.7701,
          135.001,
          0
        ]
      ],
      "row_count": 3,
      "column_count": 4
    },
    {
      "table_number": "3",
      "table_title": "Performance index example for $F 9$. The lower the number, the better the performance by the model",
      "headers": [
        "Str.",
        "F1",
        "F2",
        "F3",
        "F4",
        "F5",
        "F7",
        "F8",
        "F9"
      ],
      "rows": [
        [
          "VAE",
          -274,
          43,
          25,
          14,
          54,
          -272,
          -129,
          -44
        ],
        [
          "E-VAE",
          -648,
          -231,
          -169,
          -272,
          -224,
          -378,
          -324,
          -180
        ],
        [
          "CE-VAE",
          923,
          187,
          143,
          257,
          169,
          651,
          453,
          224
        ]
      ],
      "row_count": 3,
      "column_count": 9
    },
    {
      "table_number": "5",
      "table_title": "Overall mean results for the 5 search algorithms, for 3 problem dimensions, with 3 different population sizes.",
      "headers": [
        "Dim.",
        "21",
        "",
        "",
        "",
        "",
        "34",
        "",
        "",
        "",
        ""
      ],
      "rows": [
        [
          "Pop.",
          "Rnd",
          "$U_{C}$",
          "V",
          "E-V",
          "CE-V",
          "Rnd",
          "$U_{C}$",
          "V",
          "E-V",
          "CE-V"
        ],
        [
          50,
          1,
          22,
          1,
          2,
          18,
          30,
          30,
          29,
          29,
          30
        ],
        [
          100,
          0,
          18,
          0,
          0,
          2,
          30,
          27,
          28,
          29,
          30
        ],
        [
          200,
          0,
          14,
          0,
          0,
          0,
          28,
          27,
          6,
          14,
          30
        ],
        [
          300,
          0,
          9,
          0,
          0,
          0,
          0,
          28,
          25,
          0,
          2
        ]
      ],
      "row_count": 5,
      "column_count": 11
    }
  ]
}